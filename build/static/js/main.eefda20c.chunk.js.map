{"version":3,"sources":["IMG/B358AC13-B442-48F2-A77F-C3E1371A4BA8_1_105_c.jpeg","axios.js","firebase.js","StateProvider.js","Chat/Chat.js","Sidebar/SidebarChat/SidebarChat.js","Sidebar/Sidebar.js","Login.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","axios","create","baseURL","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","useAuthState","user","activeRoom","useState","input","setInput","messages","setMessages","useEffect","collection","doc","id","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","roomName","IconButton","message","timestamp","key","displayName","substring","Date","toDate","toUTCString","onSubmit","e","preventDefault","add","FieldValue","serverTimestamp","sendMessage","disabled","onChange","target","placeholder","type","SidebarChat","dispatch","onClick","roomInfo","src","photoURL","Sidebar","setValue","rooms","setRooms","room","signOut","console","log","action","Login","signInWithPopup","then","App","exact","path","Boolean","window","location","hostname","match","state","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,2E,mPCC1BC,EAAMC,OAAO,CAC1BC,QAAQ,0B,gBCWJC,GADcC,IAASC,cAVR,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAIER,IAASS,aACdC,EAAOV,IAASU,OAChBC,EAAW,IAAIX,IAASU,KAAKE,mBAGpBb,ICfJc,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAKQI,EAAgB,kBAAMC,qBAAWV,I,QCqF/BW,MAnFf,WAAiB,IAAD,EACCC,YAAaf,GAArBgB,EADO,sBAEoBJ,IAFpB,mBAELK,EAFK,KAELA,WAFK,QAGYC,mBAAS,KAHrB,mBAGPC,EAHO,KAGAC,EAHA,OAIkBF,mBAAS,IAJ3B,gCAKkBA,mBAAS,KAL3B,mBAKPG,EALO,KAKGC,EALH,KAgCd,OAzBAC,qBAAU,WACTN,GACC5B,EAAGmC,WAAW,SACbC,IADD,OACKR,QADL,IACKA,OADL,EACKA,EAAYS,IAChBF,WAAW,YAAaG,QAAQ,YAAa,QAC7CC,YAAW,SAACC,GAAD,OACVP,EAAYO,EAASC,KAAKC,KAAI,SAACN,GAAD,OAASA,EAAIO,gBAM5C,CAACf,IAcF,yBAAKgB,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,oBACb,mCAAKhB,QAAL,IAAKA,OAAL,EAAKA,EAAYkB,UACjB,+CAEF,yBAAKF,UAAU,oBACb,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAKN,yBAAKH,UAAU,aAAf,OACGZ,QADH,IACGA,OADH,EACGA,EAAUU,KAAI,gBAAGM,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACb,uBAAGC,IAAKD,EAAWL,UAAU,gBAC3B,0BAAMA,UAAU,aAAajB,EAAKwB,YAAYC,UAAU,EAAE,IACzDJ,EACD,0BAAMJ,UAAU,kBACb,IAAIS,KAAJ,OAASJ,QAAT,IAASA,OAAT,EAASA,EAAWK,UAAUC,oBAMvC,yBAAKX,UAAU,eACb,kBAAC,IAAD,MAEA,0BAAMY,SAAU,SAACC,GAAD,OA/CF,SAACA,GACnBA,EAAEC,iBACS,KAAR5B,IAGH9B,EAAGmC,WAAW,SAASC,IAAvB,OAA2BR,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAYS,IAAIF,WAAW,YAAYwB,IAAI,CACpEX,QAASlB,EACTmB,UAAWhD,IAASS,UAAUkD,WAAWC,oBAE3C9B,EAAS,KAsCkB+B,CAAYL,IAAIb,UAAU,eAC/C,2BAAOmB,UAAWnC,EAChBP,MAAOS,EACPkC,SAAU,SAACP,GAAD,OAAO1B,EAAS0B,EAAEQ,OAAO5C,QACnC6C,YAAY,aACZC,KAAK,SAGP,kBAAC,IAAD,U,0ECxDKC,MA3Bf,YAAqC,IAAf/B,EAAc,EAAdA,GAAGS,EAAW,EAAXA,SAAW,EACXvB,IADW,yCACvB8C,EADuB,OAEjB3C,YAAaf,GAArBgB,EAFyB,oBAWlC,OACO,yBAAK2C,QARQ,WACpBD,EAAS,CACPF,KAAK,cACLI,SAAS,CAAClC,KAAGS,eAKuBT,GAAIA,EAAIO,UAAU,eACjD,kBAACC,EAAA,EAAD,CAAQ2B,IAAK7C,EAAK8C,WAClB,yBAAM7B,UAAU,oBACd,4BAAKE,GACL,+B,OC0DI4B,MArEf,WAAoB,IAAD,EACFhD,YAAaf,GAArBgB,EADU,sBAGSE,mBAAS,IAHlB,mBAGVR,EAHU,KAGHsD,EAHG,OAIS9C,mBAAS,IAJlB,mBAIV+C,EAJU,KAIHC,EAJG,KA2BjB,OArBA3C,qBAAU,WACRlC,EAAGmC,WAAW,SAASI,YAAW,SAACC,GAAD,OAChCqC,EAASrC,EAASC,KAAKC,KAAI,SAAAN,GAAG,MAAG,CAC/BC,GAAGD,EAAIC,GACPyC,KAAK1C,EAAIO,iBAIV,CAACiC,IAcJ,yBAAKhC,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAACG,EAAA,EAAD,CAAYuB,QAAS,kBAAM3D,EAAKoE,YAC9B,kBAAClC,EAAA,EAAD,CAAQ2B,IAAK7C,EAAK8C,YAGpB,yBAAK7B,UAAU,wBACb,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,4BACb,kBAAC,IAAD,MACA,0BAAMY,SAjCK,SAACC,GAClBA,EAAEC,iBACErC,IACF2D,QAAQC,IAAI5D,GACZrB,EAAGmC,WAAW,SAASwB,IAAI,CACzBb,SAAUzB,IAEZsD,EAAS,MA0BuBO,OAAO,IACjC,2BACE7D,MAAOA,EACP2C,SAAU,SAACP,GAAD,OAAOkB,EAASlB,EAAEQ,OAAO5C,QACnC6C,YAAY,2BACZC,KAAK,YAKb,yBAAKvB,UAAU,iBACZgC,EAAMlC,KAAI,SAAAoC,GAAI,OACL,kBAAC,EAAD,CAAa5B,IAAK4B,EAAKzC,GAAIA,GAAIyC,EAAKzC,GAAIS,SAAUgC,EAAKA,KAAKhC,iB,eCvD/DqC,EAdD,WAAO,IAAD,EACHzD,YAAaf,GADV,oBAOhB,OACI,6BACC,4BAAQ2D,QAPA,WACT3D,EAAKyE,gBAAgBxE,GAAUyE,MAAK,SAAC1D,GACjCqD,QAAQC,IAAItD,QAKf,wBCqBM2D,MA3Bf,WAAgB,IAAD,EACE5D,YAAaf,GAArBgB,EADM,oBAEb,OACE,yBAAKiB,UAAU,OACZjB,EACC,yBAAKiB,UAAU,YACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEC,kBAAC,IAAD,CAAOA,KAAK,kBAEZ,kBAAC,EAAD,MACD,kBAAC,EAAD,UAKC,kBAAC,EAAD,QChBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCES5E,MAhBf,SAAiB6E,EAAMZ,GACf,OAAQA,EAAOf,MACX,IAAK,cACF,kCACO2B,GADP,IAEClE,WAAasD,EAAOX,WAIxB,QACI,MAAM,CACFuB,WCPpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe/E,aDVQ,CACvBU,WAAW,MCSgCX,QAASA,GACpD,kBAAC,EAAD,QAIFiF,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAM1D,a","file":"static/js/main.eefda20c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/B358AC13-B442-48F2-A77F-C3E1371A4BA8_1_105_c.004afe7e.jpeg\";","import axios from 'axios'\nconst instance = axios.create({\n    baseURL:'http://localhost:8080'\n})\n\nexport default instance;","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAGXTmXxneUqtrm8gq71-_3LABxlWpbRWI\",\n    authDomain: \"whatsapp-clone-5d2d3.firebaseapp.com\",\n    databaseURL: \"https://whatsapp-clone-5d2d3.firebaseio.com\",\n    projectId: \"whatsapp-clone-5d2d3\",\n    storageBucket: \"whatsapp-clone-5d2d3.appspot.com\",\n    messagingSenderId: \"808418233869\",\n    appId: \"1:808418233869:web:93bed18c8324a8d43b0f44\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\n  const db = firebase.firestore();\n  const auth = firebase.auth()\n  const provider = new firebase.auth.GoogleAuthProvider()\n\n  export {auth,provider} \n  export default db;","//!setup data layer\nimport React, { createContext, useContext, useReducer } from \"react\";\n//?this is data layer\nexport const StateContext = createContext();\n\n//?build a Provider helps you to overcome the prop drilling (from grandparent to parent to children to subchildren on so on)\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n//!this how to use it inside of a component\nexport const useStateValue = () => useContext(StateContext);","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport SelectInput from \"@material-ui/core/Select/SelectInput\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport axios from \"../axios\";\nimport db, { auth } from \"../firebase\";\nimport firebase from \"firebase\";\nimport { useStateValue } from \"../StateProvider\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nfunction Chat() {\n  const [user] = useAuthState(auth)\n  const [{ activeRoom }, dipatch] = useStateValue();\n  const [input, setInput] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\nif(activeRoom){\n    db.collection(\"rooms\")\n    .doc(activeRoom?.id)\n    .collection(\"messages\") .orderBy(\"timestamp\", \"desc\")\n    .onSnapshot((snapshot) =>\n      setMessages(snapshot.docs.map((doc) => doc.data()))\n    );\n}\n   \n   \n    \n  }, [activeRoom]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if(input===''){\n      return\n    }\n    db.collection(\"rooms\").doc(activeRoom?.id).collection(\"messages\").add({\n      message: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n  return (\n    <div className=\"chat\">\n      <div className=\"chat_header\">\n        <Avatar />\n        <div className=\"chat_header_info\">\n          <h3>{activeRoom?.roomName}</h3>\n          <p>last seen at...</p>\n        </div>\n        <div className=\"chat_headerRight\">\n          <IconButton>\n            <SearchIcon />\n          </IconButton>\n          <IconButton>\n            <AttachFileIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      {/* ${!message.received && \"chat_receiver\"}`} */}\n      <div className=\"chat_body\">\n        {messages?.map(({ message, timestamp }) => (\n          <p key={timestamp} className=\"chat_message\">\n            <span className=\"chat_name\">{user.displayName.substring(0,8)}</span>\n            {message}\n            <span className=\"chat_timestamp\">\n              {new Date(timestamp?.toDate()).toUTCString()}\n            </span>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"chat_footer\">\n        <InsertEmoticonIcon />\n\n        <form onSubmit={(e) => sendMessage(e)} className=\"form_footer\">\n          <input disabled={!activeRoom}\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"type a msg\"\n            type=\"text\"\n          />\n\n          <MicIcon />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React,{useState,useEffect} from \"react\";\nimport {Link,useParams} from 'react-router-dom'\nimport { Avatar } from \"@material-ui/core\";\nimport \"./SidebarChat.css\";\nimport Aux from \"../../hoc/Aux\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"../../firebase\";\nimport { useStateValue } from \"../../StateProvider\";\nfunction SidebarChat({id,roomName}) {\n    const[{},dispatch] = useStateValue()\n    const [user] = useAuthState(auth)\n\nconst addToactiveRoom=()=>{\n  dispatch({\n    type:\"ACTIVE_ROOM\",\n    roomInfo:{id,roomName}\n  })\n}\n\n  return (\n         <div onClick={addToactiveRoom} id={id} className=\"sidebarchat\">\n         <Avatar src={user.photoURL}/>\n         <div  className=\"sidebarChat_info\">\n           <h2>{roomName}</h2>\n           <p></p>\n         </div>\n       </div>\n\n       \n        \n\n\n  );\n}\n\nexport default SidebarChat;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport { IconButton, Avatar } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport img from \"../IMG/B358AC13-B442-48F2-A77F-C3E1371A4BA8_1_105_c.jpeg\";\nimport SidebarChat from \"./SidebarChat/SidebarChat\";\nimport uniqid from \"uniqid\";\nimport db, { auth } from \"../firebase\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\nfunction Sidebar() {\n  const [user] = useAuthState(auth);\n\n  const [value, setValue] = useState(\"\");\n  const [rooms, setRooms] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"rooms\").onSnapshot((snapshot) =>(\n      setRooms(snapshot.docs.map(doc=>({\n        id:doc.id,\n        room:doc.data()\n      })))\n      \n    ));\n    }, [rooms]);\n\n  const createRoom = (e) => {\n    e.preventDefault();\n    if (value) {\n      console.log(value);\n      db.collection(\"rooms\").add({\n        roomName: value,\n      });\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar_header\">\n        <IconButton onClick={() => auth.signOut()}>\n          <Avatar src={user.photoURL} />\n        </IconButton>\n\n        <div className=\"sidebar_header_right\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar_search\">\n        <div className=\"sidebar_search_container\">\n          <SearchIcon />\n          <form onSubmit={createRoom} action=\"\">\n            <input\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n              placeholder=\"search or start new chat\"\n              type=\"text\"\n            />\n          </form>\n        </div>\n      </div>\n      <div className=\"sidebar_chats\">\n        {rooms.map(room=>(\n                  <SidebarChat key={room.id} id={room.id} roomName={room.room.roomName}/>\n\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from 'react'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport db, { auth, provider } from './firebase'\nimport aux from './hoc/Aux'\n\nconst Login = () => {\n    const [user]=useAuthState(auth)\n    const login =()=>{\n        auth.signInWithPopup(provider).then((user)=>{\n            console.log(user);\n        })\n    }\n    return (\n        <div>\n         <button onClick={login}>log in with google</button>  \n        </div>\n    )\n}\n\nexport default Login\n","import React, { useEffect, useState } from \"react\";\nimport Chat from \"./Chat/Chat\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport { auth } from \"./firebase\";\nimport Login from \"./Login\";\nfunction App() {\n  const [user] = useAuthState(auth)\n  return (\n    <div className=\"App\">\n      {user?\n        <div className=\"app_body\">\n        <Router>\n          <Switch>\n          <Route exact path=\"/\">\n            <Sidebar />\n            <Chat />\n            </Route>\n             <Route path=\"/rooms/:roomId\">\n           \n             <Sidebar />\n            <Chat />\n            </Route>\n           \n          </Switch>\n        </Router>\n      </div>:<Login />\n    }\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState ={\n    activeRoom:null,\n}\n\nfunction reducer(state,action) {\n        switch (action.type) {\n            case \"ACTIVE_ROOM\":\n               return{\n                   ...state,\n                activeRoom : action.roomInfo\n               }\n               \n        \n            default:\n                return{\n                    state\n                }\n        }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n    </StateProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}